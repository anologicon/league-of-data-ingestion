from pyspark.sql import SparkSession
from pyspark.sql.functions import *
from pyspark.sql.types import *
from pyspark.sql import functions as F
from functools import partial
import os

spark = SparkSession.builder.getOrCreate()
spark.sparkContext.setLogLevel("ERROR")
sc = spark
hadoop_conf = sc._jsc.hadoopConfiguration()
hadoop_conf.set("fs.s3a.impl", "org.apache.hadoop.fs.s3a.S3AFileSystem")
hadoop_conf.set("fs.s3a.endpoint", os.environ["MINIO_URL"])
hadoop_conf.set("fs.s3a.access.key", "minio-root-user")
hadoop_conf.set("fs.s3a.secret.key", "minio-root-password")
hadoop_conf.set("fs.s3a.path.style.access", "True")

summoner_matches_df = spark.read.format("delta").load(
    "s3a://league-of-data-silver/summoner/matches"
)
matches_df = spark.read.format("delta").load("s3a://league-of-data-silver/match/detail")
matches_df = matches_df.dropDuplicates(["match"])
match_data_df = (
    matches_df.withColumn("participants", explode(matches_df.participants))
    .select(
        "gameCreation",
        "gameDuration",
        "gameEndTimestamp",
        "gameId",
        "gameMode",
        "gameName",
        "gameStartTimestamp",
        "gameType",
        "gameVersion",
        "mapId",
        "participants.*",
        "platformId",
        "teams",
        "match",
        "extracted_at",
    )
    .drop("challenges", "perks")
)

match_completed_df = match_data_df.withColumn(
    "teams", explode(match_data_df.teams)
).select(
    col("teams.objectives.baron.kills").alias("baron_kills"),
    col("teams.objectives.baron.first").alias("baron_first"),
    col("teams.objectives.champion.kills").alias("champion_kills"),
    col("teams.objectives.champion.first").alias("champion_first"),
    col("teams.objectives.dragon.kills").alias("dragon_kills"),
    col("teams.objectives.dragon.first").alias("dragon_first"),
    col("teams.objectives.inhibitor.kills").alias("inhibitor_kills"),
    col("teams.objectives.inhibitor.first").alias("inhibitor_first"),
    col("teams.objectives.riftHerald.kills").alias("riftHerald_kills"),
    col("teams.objectives.riftHerald.first").alias("riftHerald_first"),
    col("teams.objectives.tower.kills").alias("tower_kills"),
    col("teams.objectives.tower.first").alias("tower_first"),
    "gameCreation",
    "gameDuration",
    "gameEndTimestamp",
    "gameId",
    "gameMode",
    "gameName",
    "gameStartTimestamp",
    "gameType",
    "gameVersion",
    "mapId",
    "allInPings",
    "assistMePings",
    "assists",
    "baitPings",
    "baronKills",
    "basicPings",
    "bountyLevel",
    "champExperience",
    "champLevel",
    "championId",
    "championName",
    "championTransform",
    "commandPings",
    "consumablesPurchased",
    "damageDealtToBuildings",
    "damageDealtToObjectives",
    "damageDealtToTurrets",
    "damageSelfMitigated",
    "dangerPings",
    "deaths",
    "detectorWardsPlaced",
    "doubleKills",
    "dragonKills",
    "eligibleForProgression",
    "enemyMissingPings",
    "enemyVisionPings",
    "firstBloodAssist",
    "firstBloodKill",
    "firstTowerAssist",
    "firstTowerKill",
    "gameEndedInEarlySurrender",
    "gameEndedInSurrender",
    "getBackPings",
    "goldEarned",
    "goldSpent",
    "holdPings",
    "individualPosition",
    "inhibitorKills",
    "inhibitorTakedowns",
    "inhibitorsLost",
    "item0",
    "item1",
    "item2",
    "item3",
    "item4",
    "item5",
    "item6",
    "itemsPurchased",
    "killingSprees",
    "kills",
    "lane",
    "largestCriticalStrike",
    "largestKillingSpree",
    "largestMultiKill",
    "longestTimeSpentLiving",
    "magicDamageDealt",
    "magicDamageDealtToChampions",
    "magicDamageTaken",
    "needVisionPings",
    "neutralMinionsKilled",
    "nexusKills",
    "nexusLost",
    "nexusTakedowns",
    "objectivesStolen",
    "objectivesStolenAssists",
    "onMyWayPings",
    "participantId",
    "pentaKills",
    "physicalDamageDealt",
    "physicalDamageDealtToChampions",
    "physicalDamageTaken",
    "profileIcon",
    "pushPings",
    "puuid",
    "quadraKills",
    "riotIdName",
    "riotIdTagline",
    "role",
    "sightWardsBoughtInGame",
    "spell1Casts",
    "spell2Casts",
    "spell3Casts",
    "spell4Casts",
    "summoner1Casts",
    "summoner1Id",
    "summoner2Casts",
    "summoner2Id",
    "summonerId",
    "summonerLevel",
    "summonerName",
    "teamEarlySurrendered",
    "teamId",
    "teamPosition",
    "timeCCingOthers",
    "timePlayed",
    "totalDamageDealt",
    "totalDamageDealtToChampions",
    "totalDamageShieldedOnTeammates",
    "totalDamageTaken",
    "totalHeal",
    "totalHealsOnTeammates",
    "totalMinionsKilled",
    "totalTimeCCDealt",
    "totalTimeSpentDead",
    "totalUnitsHealed",
    "tripleKills",
    "trueDamageDealt",
    "trueDamageDealtToChampions",
    "trueDamageTaken",
    "turretKills",
    "turretTakedowns",
    "turretsLost",
    "unrealKills",
    "visionClearedPings",
    "visionScore",
    "visionWardsBoughtInGame",
    "wardsKilled",
    "wardsPlaced",
    "win",
    "platformId",
    "match",
    "extracted_at",
)

match_completed_df.write.mode("overwrite").partitionBy("match").format("delta").save(
    "s3a://league-of-data-gold/matchs/"
)
